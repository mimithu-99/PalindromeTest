package Palindrome;

public class PalindromeTest {
    public static void main(String[] args) {

        PalindromeTest x = new PalindromeTest();
        System.out.println( x.isPalindrome("Hello"));
    }
    public boolean isPalindrome(String str){

        String name ="";
        for (int i = str.length() -1; i >= 0 ; i--) {
            name = name + str.charAt(i);
        }
        if(name.equals(str)){
            return true;
        }else {
            return false;
        }

    }
    }




    /*
    package Palindrome; // একটি প্যাকেজ তৈরি করা হয়েছে যার নাম "Palindrome"
// প্যাকেজ হল কোডের একটি গ্রুপ যা একসাথে রাখা হয়।

public class PalindromeTest { // একটি পাবলিক ক্লাস তৈরি করা হয়েছে যার নাম "PalindromeTest"
// ক্লাস হল প্রোগ্রামের একটি অংশ যেখানে বিভিন্ন মেথড এবং ভ্যারিয়েবল রাখা হয়।

    public static void main(String[] args) { // মেইন মেথড হল প্রোগ্রামের শুরু করার জায়গা
    // যখনই আমরা প্রোগ্রাম রান করি, এই মেথড থেকেই শুরু হয়।

        PalindromeTest x = new PalindromeTest(); // PalindromeTest ক্লাসের একটি নতুন অবজেক্ট তৈরি করা হয়েছে, যার নাম x
        // অবজেক্ট হল ক্লাসের একটি নির্দিষ্ট উদাহরণ যা ক্লাসের সমস্ত ফিচার ব্যবহার করতে পারে।

        System.out.println(x.isPalindrome("molom")); // isPalindrome মেথড কল করে "molom" স্ট্রিংটি প্যালিনড্রোম কিনা তা প্রিন্ট করা হয়
        // "System.out.println" ব্যবহার করে আমরা কনসোলে কোন কিছু প্রিন্ট করতে পারি।
    }

    public boolean isPalindrome(String str){ // isPalindrome নামে একটি মেথড তৈরি করা হয়েছে যা স্ট্রিং ইনপুট নেয় এবং ট্রু বা ফলস রিটার্ন করে
    // মেথড হল এমন কিছু কোড যা একটি নির্দিষ্ট কাজ সম্পন্ন করে।

        String name =""; // একটি খালি স্ট্রিং ভ্যারিয়েবল তৈরি করা হয়েছে যার নাম "name"
        // স্ট্রিং হল অক্ষরের একটি সিকোয়েন্স।

        for (int i = str.length() -1; i >= 0 ; i--) { // একটি ফর লুপ যা স্ট্রিং এর শেষ অক্ষর থেকে শুরু করে প্রথম অক্ষর পর্যন্ত চলে
        // লুপ ব্যবহার করে আমরা একই কাজ বারবার করতে পারি।

            name = name + str.charAt(i); // প্রতিটি অক্ষরকে উল্টো করে "name" স্ট্রিং এর সাথে যোগ করা হচ্ছে
            // "charAt(i)" স্ট্রিং এর i তম অবস্থানের অক্ষরটি নেয়।
        }

        if(name.equals(str)){ // যদি "name" এবং মূল "str" স্ট্রিং সমান হয়, তবে প্যালিনড্রোম
        // "equals" মেথড ব্যবহার করে আমরা দুটি স্ট্রিং সমান কিনা তা চেক করি।

            return true; // যদি সমান হয়, তবে ট্রু রিটার্ন করা হয়
        } else {
            return false; // যদি সমান না হয়, তবে ফলস রিটার্ন করা হয়
        }
    }
}


এখন প্রতিটি লাইন কি কাজ করছে তা সহজ ভাষায় ব্যাখ্যা করা হলো:

package Palindrome;

এটি একটি প্যাকেজ তৈরি করে যা প্রোগ্রামিং কোডকে একসাথে সংগঠিত করে।
public class PalindromeTest {

এখানে একটি ক্লাস তৈরি করা হয়েছে যা প্রোগ্রামের বিভিন্ন মেথড এবং ভ্যারিয়েবলকে ধারণ করে।
public static void main(String[] args) {

মেইন মেথড হল সেই জায়গা যেখান থেকে প্রোগ্রাম শুরু হয়।
PalindromeTest x = new PalindromeTest();

PalindromeTest ক্লাসের একটি নতুন অবজেক্ট তৈরি করা হয়েছে, যার নাম x।
System.out.println(x.isPalindrome("molom"));

এটি কনসোলে "molom" স্ট্রিংটি প্যালিনড্রোম কিনা তা প্রিন্ট করে।
public boolean isPalindrome(String str){

একটি মেথড যা স্ট্রিং ইনপুট নেয় এবং সেই স্ট্রিংটি প্যালিনড্রোম কিনা তা চেক করে।
String name ="";

একটি খালি স্ট্রিং ভ্যারিয়েবল তৈরি করা হয়েছে যার নাম "name"।
for (int i = str.length() -1; i >= 0 ; i--) {

একটি লুপ যা স্ট্রিংটির শেষ অক্ষর থেকে শুরু করে প্রথম অক্ষর পর্যন্ত চলে।
name = name + str.charAt(i);

স্ট্রিংটির প্রতিটি অক্ষরকে উল্টো করে "name" স্ট্রিং এ যোগ করা হচ্ছে।
if(name.equals(str)){

চেক করা হচ্ছে "name" এবং "str" স্ট্রিং দুটি সমান কিনা।
return true;

যদি সমান হয়, তবে ট্রু রিটার্ন করা হচ্ছে।
return false;

যদি সমান না হয়, তবে ফলস রিটার্ন করা হচ্ছে।
এভাবে, কোডটি একটি স্ট্রিং প্যালিনড্রোম কিনা তা যাচাই করে।

---------------------------------------------------------------------------------

অবশ্যই! নিচে PalindromeTest x = new PalindromeTest(); এবং System.out.println(x.isPalindrome("Hello")); লাইনগুলোর কাজ সহজ ভাষায় ব্যাখ্যা করে দেয়া হলো:

১ম লাইন: PalindromeTest x = new PalindromeTest();
কাজ:
এই লাইনটি একটি নতুন অবজেক্ট তৈরি করে PalindromeTest ক্লাস থেকে এবং সেটি ভ্যারিয়েবল x তে সংরক্ষণ করে।

কেন ব্যবহার করতে হচ্ছে:
আমরা PalindromeTest ক্লাসের মধ্যে থাকা isPalindrome মেথডটি কল করতে চাই। একটি ক্লাসের মেথড ব্যবহার করতে
হলে আমাদের সেই ক্লাসের একটি অবজেক্ট তৈরি করতে হয়। অবজেক্ট তৈরি করলে আমরা সেই অবজেক্টের মাধ্যমে ক্লাসের মেথড এবং ভ্যারিয়েবল ব্যবহার করতে পারি।

কিভাবে কাজ হচ্ছে:
PalindromeTest ক্লাসের একটি নতুন উদাহরণ তৈরি করা হচ্ছে।
new কীওয়ার্ডটি ব্যবহার করে মেমোরিতে একটি নতুন অবজেক্ট তৈরি করা হয়।
তৈরি করা অবজেক্টটি ভ্যারিয়েবল x তে রাখা হয়।
এটা ঠিক যেন:

PalindromeTest হল একটি "ব্লুপ্রিন্ট" এবং x হল সেই ব্লুপ্রিন্ট থেকে তৈরি একটি "অবজেক্ট"।
উদাহরণস্বরূপ, PalindromeTest একটি খেলনা তৈরি করার মেশিন, আর x হল সেই মেশিন থেকে তৈরি করা একটি খেলনা।
২য় লাইন: System.out.println(x.isPalindrome("Hello"));
কাজ:
এই লাইনটি x অবজেক্টের isPalindrome মেথড কল করে এবং স্ট্রিং "Hello" প্যালিনড্রোম কিনা তা চেক করে। তারপর ফলাফল কনসোলে প্রিন্ট করে।

কেন ব্যবহার করতে হচ্ছে:
আমরা স্ট্রিং "Hello" প্যালিনড্রোম কিনা তা জানতে চাই এবং ফলাফলটি কনসোলে দেখাতে চাই। isPalindrome মেথডটি কল করার মাধ্যমে আমরা এই চেকটি করতে পারি।

কিভাবে কাজ হচ্ছে:
x.isPalindrome("Hello") : x অবজেক্টের isPalindrome মেথডটি কল করা হচ্ছে এবং "Hello" স্ট্রিংটি পাস করা হচ্ছে।
isPalindrome মেথডটি "Hello" স্ট্রিংটি প্যালিনড্রোম কিনা তা চেক করে এবং একটি boolean মান (true বা false) রিটার্ন করে।
System.out.println মেথডটি সেই রিটার্ন করা মানটি কনসোলে প্রিন্ট করে।
উদাহরণ:
ধরা যাক, আমাদের PalindromeTest ক্লাসটি এভাবে লেখা:


public class PalindromeTest {
    public boolean isPalindrome(String str) {
        String name = "";
        for (int i = str.length() - 1; i >= 0; i--) {
            name = name + str.charAt(i);
        }
        return name.equals(str);
    }
}
এখন, আমাদের মূল কোডে:


PalindromeTest x = new PalindromeTest(); // একটি নতুন PalindromeTest অবজেক্ট তৈরি করা হয়েছে
System.out.println(x.isPalindrome("Hello")); // "Hello" প্যালিনড্রোম কিনা তা চেক করে প্রিন্ট করা হচ্ছে
কী ঘটছে:
PalindromeTest x = new PalindromeTest();

x নামে একটি নতুন অবজেক্ট তৈরি করা হয় PalindromeTest ক্লাস থেকে।
System.out.println(x.isPalindrome("Hello"));

x অবজেক্টের isPalindrome মেথডটি কল করা হচ্ছে এবং "Hello" পাস করা হচ্ছে।
মেথডটি "Hello" এর উল্টো "olleH" তৈরি করে এবং চেক করে "Hello" এর সমান কিনা।
যেহেতু "Hello" এবং "olleH" সমান নয়, মেথডটি false রিটার্ন করে।
System.out.println false প্রিন্ট করে।
এভাবে, আমরা একটি স্ট্রিং প্যালিনড্রোম কিনা তা চেক করতে পারি এবং ফলাফলটি কনসোলে দেখতে পারি।

---------------------------------------------------------------------------------
for (int i = str.length() -1; i >= 0 ; i--) {
    name = name + str.charAt(i);
}
এই অংশের কাজ:
এই for লুপটি স্ট্রিংটির প্রতিটি অক্ষরকে উল্টো করে (শেষ অক্ষর থেকে প্রথম অক্ষর পর্যন্ত) একটি নতুন স্ট্রিংয়ে যোগ করে। সহজ ভাষায় বলতে গেলে, এটি স্ট্রিংটি উল্টো করার জন্য ব্যবহৃত হয়।

কেন এই লাইনটা ব্যবহার করতে হচ্ছে:
আমরা একটি স্ট্রিং প্যালিনড্রোম কিনা তা চেক করতে চাই। প্যালিনড্রোম হল এমন একটি স্ট্রিং যা উল্টো করলে একই থাকে, যেমন "madam",
"racecar" ইত্যাদি। তাই আমরা মূল স্ট্রিংটির উল্টো স্ট্রিং তৈরি করে যাচাই করি যে উল্টো স্ট্রিংটি মূল স্ট্রিংটির সাথে সমান কিনা। এজন্য আমাদের এই লুপটি ব্যবহার করতে হয়।

কিভাবে কাজ হচ্ছে:
চলুন ধাপে ধাপে দেখি কিভাবে লুপটি কাজ করছে:

শুরু করা:

int i = str.length() - 1 : এখানে i ভ্যারিয়েবলটি তৈরি করা হয় এবং সেটি স্ট্রিংটির শেষ অক্ষরের অবস্থানে সেট করা হয়।
যদি স্ট্রিংটি "hello" হয়, তাহলে str.length() - 1 হবে 4 (কারণ স্ট্রিংয়ের ইনডেক্স 0 থেকে শুরু হয়)।
পরীক্ষা করা:

i >= 0 : এই শর্তটি চেক করে যে i ভ্যারিয়েবলটি 0 বা তার চেয়ে বড় কিনা। যদি হয়, তাহলে লুপটি চলতে থাকে; না হলে লুপটি থামে।
কাজ করা:

name = name + str.charAt(i) : স্ট্রিংটির i তম অবস্থানের অক্ষরটি name স্ট্রিংয়ে যোগ করা হয়।
প্রথমে name খালি থাকে, পরে একে একে স্ট্রিংয়ের অক্ষরগুলো উল্টোভাবে যোগ করা হয়।
কমানো:

i-- : প্রতিবার লুপ চালানোর পর i এর মান ১ করে কমানো হয়, যাতে এটি পরবর্তী (আগের) অক্ষরে চলে যায়।
উদাহরণ:
চলুন একটি উদাহরণ দেখি যেখানে স্ট্রিংটি "hello":

প্রথম লুপ (i = 4):

name = "" + 'o' : name হয় "o"
i কমে ৩ হয়
দ্বিতীয় লুপ (i = 3):

name = "o" + 'l' : name হয় "ol"
i কমে ২ হয়
তৃতীয় লুপ (i = 2):

name = "ol" + 'l' : name হয় "oll"
i কমে ১ হয়
চতুর্থ লুপ (i = 1):

name = "oll" + 'e' : name হয় "olle"
i কমে ০ হয়
পঞ্চম লুপ (i = 0):

name = "olle" + 'h' : name হয় "olleh"
i কমে -১ হয়
এখন লুপটি থামে কারণ i আর ০ বা তার চেয়ে বড় নেই। নতুন name স্ট্রিংটি হয় "olleh" যা "hello" এর উল্টো।

সংক্ষেপে:
for (int i = str.length() -1; i >= 0 ; i--) : শেষ অক্ষর থেকে প্রথম অক্ষর পর্যন্ত লুপ চালানো।
name = name + str.charAt(i) : প্রতিটি অক্ষর উল্টো করে name এ যোগ করা।
এভাবে, আমরা মূল স্ট্রিংটির উল্টো স্ট্রিং তৈরি করতে পারি।

--------------------------------------------------------------------------------------

if(name.equals(str)){
    return true;
} else {
    return false;
}
এই অংশের কাজ:
এই if-else অংশটি চেক করে যে name স্ট্রিংটি মূল str স্ট্রিংটির সমান কিনা। যদি সমান হয়, তাহলে এটি true রিটার্ন করে, আর যদি সমান না হয়, তাহলে এটি false রিটার্ন করে।

কেন এই লাইনটা ব্যবহার করতে হচ্ছে:
আমরা দেখতে চাই যে একটি স্ট্রিং প্যালিনড্রোম কিনা। প্যালিনড্রোম হল এমন একটি স্ট্রিং যা উল্টো করলে একই থাকে। তাই আমরা মূল স্ট্রিংটি এবং উল্টো স্ট্রিংটি তুলনা করি। যদি তারা সমান হয়, তাহলে স্ট্রিংটি প্যালিনড্রোম। এজন্যই এই লাইনগুলো ব্যবহার করতে হয়।

কিভাবে কাজ হচ্ছে:
চলুন ধাপে ধাপে দেখি কিভাবে if-else অংশটি কাজ করছে:

তুলনা করা:

if(name.equals(str)) : equals মেথডটি চেক করে যে name স্ট্রিংটি এবং str স্ট্রিংটি সমান কিনা। equals মেথডটি দুটি স্ট্রিংয়ের অক্ষরগুলিকে তুলনা করে এবং যদি সব অক্ষর একই হয় তাহলে এটি true রিটার্ন করে, আর যদি কোনো অক্ষর ভিন্ন হয় তাহলে এটি false রিটার্ন করে।
ফলাফল রিটার্ন করা:

return true; : যদি name এবং str সমান হয়, তাহলে true রিটার্ন করে। এটি বোঝায় যে স্ট্রিংটি প্যালিনড্রোম।
return false; : যদি name এবং str সমান না হয়, তাহলে false রিটার্ন করে। এটি বোঝায় যে স্ট্রিংটি প্যালিনড্রোম নয়।
উদাহরণ:
চলুন একটি উদাহরণ দেখি যেখানে str স্ট্রিংটি "madam" এবং name স্ট্রিংটিও "madam":

if(name.equals(str)) : এখানে name ("madam") এবং str ("madam") সমান, তাই equals মেথডটি true রিটার্ন করবে।
return true; : যেহেতু if শর্তটি true, তাই এটি true রিটার্ন করবে, যা বোঝায় যে স্ট্রিংটি প্যালিনড্রোম।
অন্য একটি উদাহরণ যেখানে str স্ট্রিংটি "hello" এবং name স্ট্রিংটি "olleh":

if(name.equals(str)) : এখানে name ("olleh") এবং str ("hello") সমান নয়, তাই equals মেথডটি false রিটার্ন করবে।
return false; : যেহেতু if শর্তটি false, তাই এটি else অংশে যাবে এবং false রিটার্ন করবে, যা বোঝায় যে স্ট্রিংটি প্যালিনড্রোম নয়।
সংক্ষেপে:
if(name.equals(str)) : চেক করা name এবং str স্ট্রিং দুটি সমান কিনা।
return true; : যদি সমান হয়, তাহলে true রিটার্ন করা, যা বোঝায় যে স্ট্রিংটি প্যালিনড্রোম।
return false; : যদি সমান না হয়, তাহলে false রিটার্ন করা, যা বোঝায় যে স্ট্রিংটি প্যালিনড্রোম নয়।
এভাবে, আমরা সহজেই চেক করতে পারি একটি স্ট্রিং প্যালিনড্রোম কিনা।



     */

